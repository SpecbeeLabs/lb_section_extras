<?php

/**
 * @file
 * Layout builder customizations.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;

/**
 * Implements hook_preprocess_layout().
 */
function lb_section_extras_preprocess_layout(&$variables) {
  $classes = [];

  $settings = $variables['settings']['lb_section_extras'];
  $showConfig = $settings['show_config'];

  if ($variables['settings'] && $showConfig) {
    if(isset($settings['section_background']) || isset($settings['padding']) || isset($settings['spacing']) || isset($settings['section_theme']['styles'])) {
      // Merge all modifier classes.
      $classes = array_merge($classes,
        $settings['section_background'],
        $settings['padding'],
        $settings['spacing'],
        $settings['section_theme']['styles']
      );
    }

    // Set section attributes.
    if (isset($settings['section_attributes'])) {
      if (isset($settings['section_attributes']['id']) && $settings['section_attributes']['id'] !== '') {
        $variables['attributes']['id'] = $settings['section_attributes']['id'];
      }
      if (isset($settings['section_attributes']['classes']) && $settings['section_attributes']['classes'] !== '') {
        $classes = array_merge($classes, [$settings['section_attributes']['classes']]);
      }
      if (isset($settings['section_attributes']['data']) && $settings['section_attributes']['data'] !== '') {
        $data_attrs = $settings['section_attributes']['data'];
        $data_attrs = preg_split('/\R/', $data_attrs);
        foreach ($data_attrs as $data_attr) {
          $data_attr = explode('|', $data_attr);
          $variables['attributes'][$data_attr[0]] = $data_attr[1] ?? TRUE;
        }
      }
    }

    // Filter out any none values.
    $classes = array_filter($classes, fn ($m) => $m != 'none');
  }

  foreach ($classes as $class) {
    $variables['attributes']['class'][] = $class;
  }
}


/**
* Implements hook_form_FORM_ID_alter().
*/
function lb_section_extras_form_layout_builder_configure_section_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  $config = $form_object->getCurrentLayout()->getConfiguration();
  $styleSettingConfigs = \Drupal::config('lb_section_extras.settings');

  $form['layout_settings']['show_config'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable Section Configuration'),
    '#default_value' => $config['lb_section_extras']['show_config'] ?? 0,
  ];

  $form['layout_settings']['section_attributes'] = [
    '#type' => 'details',
    '#title' => t('Section Attributes'),
    '#tree' => TRUE,
    '#states' => [
      'visible' => [
        ':input[name="layout_settings[show_config]"]' => ['checked' => TRUE],
      ],
    ]
  ];

  $form['layout_settings']['section_attributes']['id'] = [
    '#type' => 'textfield',
    '#title' => t('ID'),
    '#description' => t('<p>A unique HTML identifier for the section.</p>'),
    '#default_value' => $config['lb_section_extras']['section_attributes']['id'] ?? '',
  ];
  $form['layout_settings']['section_attributes']['classes'] = [
    '#type' => 'textfield',
    '#title' => t('Classes'),
    '#description' => t('<p>The classes to applied on section. Please seprate them with spaces.</p>'),
    '#default_value' => $config['lb_section_extras']['section_attributes']['classes'] ?? [],
  ];
  $form['layout_settings']['section_attributes']['data'] = [
    '#type' => 'textarea',
    '#title' => t('Data-* attributes'),
    '#description' => t('<p>Enter one value per line, in the format <b>key|label</b> format. The pipe (|) separating its name and its optional value:<br>data-section|example-value<br>data-attribute-with-no-value</p>'),
    '#default_value' => $config['lb_section_extras']['section_attributes']['data'] ?? [],
  ];

  $form['layout_settings']['section_title'] = [
    '#type' => 'details',
    '#title' => t('Section Title'),
    '#tree' => TRUE,
    '#states' => [
      'visible' => [
        ':input[name="layout_settings[show_config]"]' => ['checked' => TRUE],
      ],
    ]
  ];
  $form['layout_settings']['section_title']['heading'] = [
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('Provide an optional title to the layout section'),
    '#default_value' => $config['lb_section_extras']['section_title']['heading'] ?? '',
  ];
  $form['layout_settings']['section_title']['heading_style'] = [
    '#type' => 'select',
    '#title' => t('Style'),
    '#options' => [
      'h1' => t('H1'),
      'h2' => t('H2'),
      'h3' => t('H3'),
      'h4' => t('H4'),
      'h5' => t('H5'),
      'h6' => t('H6'),
    ],
    '#default_value' => $config['lb_section_extras']['section_title']['heading_style'] ?? 'h1',
  ];
  $form['layout_settings']['section_title']['heading_alignment'] = [
    '#type' => 'select',
    '#title' => t('Alignment'),
    '#options' => [
      'text-start' => t('Left'),
      'text-end' => t('Right'),
      'text-center' => t('Center'),
    ],
    '#default_value' => $config['lb_section_extras']['section_title']['heading_alignment'] ?? 'text-start',
  ];

  $form['layout_settings']['section_background'] = [
    '#type' => 'details',
    '#title' => t('Section Background'),
    '#states' => [
      'visible' => [
        ':input[name="layout_settings[show_config]"]' => ['checked' => TRUE],
      ],
    ]
  ];
  $colorOptions = _get_colors($styleSettingConfigs->get('background_colors'));
  $form['layout_settings']['section_background']['background_color'] = [
    '#type' => 'select',
    '#options' => $colorOptions,
    '#default_value' => $config['lb_section_extras']['section_background']['background_color'] ?? 'bg-none',
    '#title' => t('Background Color'),
  ];

  $form['layout_settings']['padding'] = [
    '#type' => 'details',
    '#title' => t('Section Padding'),
    '#states' => [
      'visible' => [
        ':input[name="layout_settings[show_config]"]' => ['checked' => TRUE],
      ],
    ]
  ];
  $paddingOptions = [
    'padding_top' => t('Top padding'),
    'padding_bottom' => t('Bottom padding'),
    'padding_left' => t('Left padding'),
    'padding_right' => t('Right padding'),
  ];
  foreach ($paddingOptions as $key => $value) {
    $form['layout_settings']['padding'][$key] = [
      '#type' => 'select',
      '#title' => $value,
      '#options' => [
        'none' => t('None'),
      ],
      '#empty_value' => 'none',
      '#default_value' => $config['lb_section_extras']['padding'][$key] ?? 'none',
    ];
    $form['layout_settings']['padding'][$key]['#options'] = _get_config_values($styleSettingConfigs->get($key));
  }

  $form['layout_settings']['spacing'] = [
    '#type' => 'details',
    '#title' => t('Section Spacing'),
    '#states' => [
      'visible' => [
        ':input[name="layout_settings[show_config]"]' => ['checked' => TRUE],
      ],
    ]
  ];
  $spacingOptions = [
    'spacing_top' => t('Top spacing'),
    'spacing_bottom' => t('Bottom spacing'),
    'spacing_left' => t('Left spacing'),
    'spacing_right' => t('Right spacing'),
  ];
  foreach ($spacingOptions as $key => $value) {
    $form['layout_settings']['spacing'][$key] = [
      '#type' => 'select',
      '#title' => $value,
      '#options' => [
        'none' => t('None'),
      ],
      '#empty_value' => 'none',
      '#default_value' => $config['lb_section_extras']['spacing'][$key] ?? 'none',
    ];
    $form['layout_settings']['spacing'][$key]['#options'] = _get_config_values($styleSettingConfigs->get($key));
  }

  $form['layout_settings']['section_theme'] = [
    '#type' => 'details',
    '#title' => t('Section Theme'),
    '#states' => [
      'visible' => [
        ':input[name="layout_settings[show_config]"]' => ['checked' => TRUE],
      ],
    ]
  ];
  $form['layout_settings']['section_theme']['styles'] = [
    '#type' => 'checkboxes',
    '#multiple' => TRUE,
    '#options' => _get_config_values($styleSettingConfigs->get('styles')),
    '#default_value' => $config['lb_section_extras']['section_theme']['styles'] ?? [],
  ];

  // Custom submit and validation handlers.
  array_unshift($form['#validate'], '_lb_section_extras_config_validate_form');
  array_unshift($form['#submit'], '_lb_section_extras_config_submit_form');

}

/**
 * Custom validation handler for section config form.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 */
function _lb_section_extras_config_validate_form(array $form, FormStateInterface $form_state) {
  $values = $form_state->getValues();

  // Validate section attributes.
  if ($values['layout_settings']['show_config']) {
    if (isset($values['layout_settings']['section_attributes']['id']) &&!_lb_section_extras_validate_attribute($values['layout_settings']['section_attributes']['id'])) {
      $form_state->setError($form['layout_settings']['section_attributes']['id'], t('ID attribute must be valid for CSS.'));
    }
    if (isset($values['layout_settings']['section_attributes']['classes'])) {
      $classes = explode(' ', $values['layout_settings']['section_attributes']['classes']);
      foreach ($classes as $class) {
        if (!_lb_section_extras_validate_attribute($class)) {
          $form_state->setError($form['layout_settings']['section_attributes']['classes'], t('Class attribute must be valid CSS classes'));
          break;
        }
      }
    }
    if (isset($values['layout_settings']['section_attributes']['data'])) {
      $data_attrs = preg_split('/\R/', $values['layout_settings']['section_attributes']['data']);
      foreach ($data_attrs as $data_attr) {
        if (empty($data_attr)) {
          break;
        }
        $data_attr = explode('|', $data_attr);
        if (substr($data_attr[0], 0, 5) !== 'data-') {
          $form_state->setError($form['layout_settings']['section_attributes']['data'], t('Data attributes must begin with "data-"'));
        }
      }
    }
  }
}

/**
 * Helper function to validate css attributes.
 *
 * @param string $value
 *   The attribute value.
 *
 * @return bool
 */
function _lb_section_extras_validate_attribute($value) {
  if ($value == Html::cleanCssIdentifier($value)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Submit handler for submitting LB section config form.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 */
function _lb_section_extras_config_submit_form(array $form, FormStateInterface $form_state) {

  $formObject = $form_state->getFormObject();
  $config = $formObject->getCurrentLayout()->getConfiguration();
  if (!$config) {
    $config = [];
  }

  $showConfig = $form_state->getValue(['layout_settings', 'show_config']);

  if ($showConfig) {
    $config['lb_section_extras'] = [
      'show_config' => $form_state->getValue(['layout_settings', 'show_config']),
      'section_attributes' => [
        'id' => $form_state->getValue(['layout_settings', 'section_attributes', 'id']),
        'classes' => $form_state->getValue(['layout_settings', 'section_attributes', 'classes']),
        'data' => $form_state->getValue(['layout_settings', 'section_attributes', 'data']),
      ],
      'section_title' => [
        'heading' => $form_state->getValue(['layout_settings', 'section_title', 'heading']),
        'heading_style' => $form_state->getValue(['layout_settings', 'section_title', 'heading_style']),
        'heading_alignment' => $form_state->getValue(['layout_settings', 'section_title', 'heading_alignment'])
      ],
      'section_background' => [
        'background_color' => $form_state->getValue(['layout_settings', 'section_background', 'background_color'])
      ],
      'padding' => [
        'padding_top' => $form_state->getValue(['layout_settings', 'padding', 'padding_top']),
        'padding_bottom' => $form_state->getValue(['layout_settings', 'padding', 'padding_bottom']),
        'padding_left' => $form_state->getValue(['layout_settings', 'padding', 'padding_left']),
        'padding_right' => $form_state->getValue(['layout_settings', 'padding', 'padding_right']),
      ],
      'spacing' => [
        'spacing_top' => $form_state->getValue(['layout_settings', 'spacing', 'spacing_top']),
        'spacing_bottom' => $form_state->getValue(['layout_settings', 'spacing', 'spacing_bottom']),
        'spacing_left' => $form_state->getValue(['layout_settings', 'spacing', 'spacing_left']),
        'spacing_right' => $form_state->getValue(['layout_settings', 'spacing', 'spacing_right']),
      ],
      'section_theme' => [
        'styles' => $form_state->getValue(['layout_settings', 'section_theme', 'styles']),
      ],
    ];
  }
  else {
    $config['lb_section_extras'] = [];
  }

  $formObject->getCurrentLayout()->setConfiguration($config);

}



/**
 * Get color options.
 *
 * @param object $colorConfigs
 *   The color configurtion setting object.
 *
 * @return array
 *   The color options array.
 */
function _get_colors($colorConfigs) {
  $options = [];

  if (isset($colorConfigs) && $colorConfigs !== '') {
    $colors = _get_config_values($colorConfigs);
    foreach ($colors as $class => $color) {
      $options[$class] = $color;
    }
    $options = ['bg-none' => t("None")] + $options;
  }

  return $options;
}

/**
 * Explode the config options to array.
 *
 * @param string $configs
 *   The configurtion setting object.
 *
 * @return array
 *   The exploded options array.
 *
 */
function _get_config_values($configs) {
  $options = [];
  foreach (explode("\r\n", $configs) as $config) {
    $config = trim($config);
    if (!empty($config)) {
      [$class, $label] = explode('|', $config);
      $options[$class] = $label;
    }
  }

  return $options;
}
