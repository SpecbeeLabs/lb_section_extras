<?php

/**
 * @file
 * Layout builder customizations.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;

/**
 * Implements hook_preprocess_layout().
 */
function lb_section_extras_preprocess_layout(&$variables) {

  $class = [];

  if ($variables['settings'] && (
      isset($variables['settings']['section_background']) ||
      isset($variables['settings']['section_padding']) ||
      isset($variables['settings']['section_spacing']) ||
      isset($variables['settings']['section_theme']['styles']))) {
    // Merge all modifier classes.
    $class = array_merge($class,
      [$variables['settings']['section_background']['background_color']],
      $variables['settings']['section_padding'],
      $variables['settings']['section_spacing'],
      $variables['settings']['section_theme']['styles']
    );

    // Filter out any none values.
    $class = array_filter($class, fn ($m) => $m != 'none');
  }

  $media = $variables['settings']['section_background']['image']['background_media'] ?? NULL;
  $position = $variables['settings']['section_background']['image']['background_position'] ?? NULL;
  $size = $variables['settings']['section_background']['image']['background_size'] ?? NULL;
  $repeat = $variables['settings']['section_background']['image']['background_repeat'] ?? NULL;
  $attachment = $variables['settings']['section_background']['image']['background_attachment'] ?? NULL;

  if ($media) {
    $entity = Media::load($media);
    if ($entity) {
      $fid = $entity->getSource()->getSourceFieldValue($entity);
      $file = File::load($fid);
      $url = $file->createFileUrl();
      $background_media = [
        'background-image: url(' . $url . ');',
        'background-position: ' . $position . ';',
        'background-size: ' . $size . ';',
        'background-repeat: ' . $repeat . ';',
        'background-attachment: ' . $attachment . ';',
      ];

    }
  }

  $variables['attributes']['class'][] = $class;
  if (!empty($background_media)) {
    $variables['#attributes']['style'] = $background_media;
  }
}


/**
* Implements hook_form_FORM_ID_alter().
*/
function lb_section_extras_form_layout_builder_configure_section_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  $config = $form_object->getCurrentLayout()->getConfiguration();
  $styleSettingConfigs = \Drupal::config('lb_section_extras.settings');

  $form['layout_settings']['show_config'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable Section Configuration'),
    '#default_value' => $config['lb_section_extras']['show_config'] ?? 0,
  ];

  $form['layout_settings']['section_title'] = [
    '#type' => 'details',
    '#title' => t('Section Title'),
    '#tree' => TRUE,
    '#states' => [
      'visible' => [
        ':input[name="layout_settings[show_config]"]' => ['checked' => TRUE],
      ],
    ]
  ];
  $form['layout_settings']['section_title']['heading'] = [
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('Provide an optional title to the layout section'),
    '#default_value' => $config['lb_section_extras']['section_title']['heading'] ?? '',
  ];
  $form['layout_settings']['section_title']['heading_style'] = [
    '#type' => 'select',
    '#title' => t('Style'),
    '#options' => [
      'h1' => t('H1'),
      'h2' => t('H2'),
      'h3' => t('H3'),
      'h4' => t('H4'),
      'h5' => t('H5'),
      'h6' => t('H6'),
    ],
    '#default_value' => $config['lb_section_extras']['section_title']['heading_style'] ?? 'h1',
  ];
  $form['layout_settings']['section_title']['heading_alignment'] = [
    '#type' => 'select',
    '#title' => t('Alignment'),
    '#options' => [
      'text-start' => t('Left'),
      'text-end' => t('Right'),
      'text-center' => t('Center'),
    ],
    '#default_value' => $config['lb_section_extras']['section_title']['heading_alignment'] ?? 'text-start',
  ];

  $form['layout_settings']['section_background'] = [
    '#type' => 'details',
    '#title' => t('Section Background'),
    '#states' => [
      'visible' => [
        ':input[name="layout_settings[show_config]"]' => ['checked' => TRUE],
      ],
    ]
  ];
  $colorOptions = _get_colors($styleSettingConfigs->get('background_colors'));
  $form['layout_settings']['section_background']['background_color'] = [
    '#type' => 'select',
    '#options' => $colorOptions,
    '#default_value' => $config['lb_section_extras']['section_background']['background_color'] ?? 'bg-none',
    '#title' => t('Background Color'),
  ];

  $form['layout_settings']['padding'] = [
    '#type' => 'details',
    '#title' => t('Section Padding'),
    '#states' => [
      'visible' => [
        ':input[name="layout_settings[show_config]"]' => ['checked' => TRUE],
      ],
    ]
  ];
  $paddingOptions = [
    'padding_top' => t('Top padding'),
    'padding_bottom' => t('Bottom padding'),
    'padding_left' => t('Left padding'),
    'padding_right' => t('Right padding'),
  ];
  foreach ($paddingOptions as $key => $value) {
    $form['layout_settings']['padding'][$key] = [
      '#type' => 'select',
      '#title' => $value,
      '#options' => [
        'none' => t('None'),
      ],
      '#empty_value' => 'none',
      '#default_value' => $config['lb_section_extras']['padding'][$key] ?? 'none',
    ];
    $form['layout_settings']['padding'][$key]['#options'] = _get_config_values($styleSettingConfigs->get($key));
  }

  $form['layout_settings']['spacing'] = [
    '#type' => 'details',
    '#title' => t('Section Spacing'),
    '#states' => [
      'visible' => [
        ':input[name="layout_settings[show_config]"]' => ['checked' => TRUE],
      ],
    ]
  ];
  $spacingOptions = [
    'spacing_top' => t('Top spacing'),
    'spacing_bottom' => t('Bottom spacing'),
    'spacing_left' => t('Left spacing'),
    'spacing_right' => t('Right spacing'),
  ];
  foreach ($spacingOptions as $key => $value) {
    $form['layout_settings']['spacing'][$key] = [
      '#type' => 'select',
      '#title' => $value,
      '#options' => [
        'none' => t('None'),
      ],
      '#empty_value' => 'none',
      '#default_value' => $config['lb_section_extras']['spacing'][$key] ?? 'none',
    ];
    $form['layout_settings']['spacing'][$key]['#options'] = _get_config_values($styleSettingConfigs->get($key));
  }

  $form['layout_settings']['section_theme'] = [
    '#type' => 'details',
    '#title' => t('Theme'),
    '#states' => [
      'visible' => [
        ':input[name="layout_settings[show_config]"]' => ['checked' => TRUE],
      ],
    ]
  ];
  $form['layout_settings']['section_theme']['styles'] = [
    '#type' => 'checkboxes',
    '#multiple' => TRUE,
    '#options' => _get_config_values($styleSettingConfigs->get('styles')),
    '#default_value' => $config['lb_section_extras']['section_theme']['styles'] ?? [],
  ];

  array_unshift($form['#submit'], '_lb_section_extras_config_submit_form');

}

/**
 * Submit handler for submitting LB section config form.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 */
function _lb_section_extras_config_submit_form(array $form, FormStateInterface $form_state) {

  $formObject = $form_state->getFormObject();
  $config = $formObject->getCurrentLayout()->getConfiguration();
  if (!$config) {
    $config = [];
  }

  $showConfig = $form_state->getValue(['layout_settings', 'show_config']);
  $config['lb_section_extras']['show_config'] = $showConfig;

  if ($showConfig) {
    $config['lb_section_extras'] = [
      'section_title' => [
        'heading' => $form_state->getValue(['layout_settings', 'section_title', 'heading']),
        'heading_style' => $form_state->getValue(['layout_settings', 'section_title', 'heading_style']),
        'heading_alignment' => $form_state->getValue(['layout_settings', 'section_title', 'heading_alignment'])
      ],
      'section_background' => [
        'background_color' => $form_state->getValue(['layout_settings', 'section_background', 'background_color'])
      ],
      'padding' => [
        'padding_top' => $form_state->getValue(['layout_settings', 'padding', 'padding_top']),
        'padding_bottom' => $form_state->getValue(['layout_settings', 'padding', 'padding_bottom']),
        'padding_left' => $form_state->getValue(['layout_settings', 'padding', 'padding_left']),
        'padding_right' => $form_state->getValue(['layout_settings', 'padding', 'padding_right']),
      ],
      'spacing' => [
        'spacing_top' => $form_state->getValue(['layout_settings', 'spacing', 'spacing_top']),
        'spacing_bottom' => $form_state->getValue(['layout_settings', 'spacing', 'spacing_bottom']),
        'spacing_left' => $form_state->getValue(['layout_settings', 'spacing', 'spacing_left']),
        'spacing_right' => $form_state->getValue(['layout_settings', 'spacing', 'spacing_right']),
      ],
      'section_theme' => [
        'styles' => $form_state->getValue(['layout_settings', 'section_theme', 'styles']),
      ],
    ];
  }
  else {
    $config = [];
  }

  $formObject->getCurrentLayout()->setConfiguration($config);

}

/**
 * Get color options.
 *
 * @param object $colorConfigs
 *   The color configurtion setting object.
 *
 * @return array
 *   The color options array.
 */
function _get_colors($colorConfigs) {
  $options = [];

  if (isset($colorConfigs) && $colorConfigs !== '') {
    $colors = _get_config_values($colorConfigs);
    foreach ($colors as $class => $color) {
      $options[$class] = $color;
    }
    $options = ['bg-none' => t("None")] + $options;
  }

  return $options;
}

/**
 * Explode the config options to array.
 *
 * @param string $configs
 *   The configurtion setting object.
 *
 * @return array
 *   The exploded options array.
 *
 */
function _get_config_values($configs) {
  $options = [];
  foreach (explode("\r\n", $configs) as $config) {
    $config = trim($config);
    if (!empty($config)) {
      [$class, $label] = explode('|', $config);
      $options[$class] = $label;
    }
  }

  return $options;
}
